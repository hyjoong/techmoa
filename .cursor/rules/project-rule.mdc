---
description: 
globs: 
alwaysApply: false
---
# Tech Blog Hub - Cursor Rules

## 프로젝트 개요
- 기술 블로그 크롤링 및 집계 서비스
- Next.js 15 (App Router) + React 19 + TypeScript
- Supabase (PostgreSQL) + shadcn/ui + Tailwind CSS
- RSS 기반 자동 크롤링 시스템

## 코딩 스타일 및 규칙

### TypeScript
- 엄격한 타입 검사 사용
- interface보다 type 선호 (단, React 컴포넌트 props는 interface 사용)
- 모든 함수에 명시적 타입 지정
- any 타입 사용 금지

### React/Next.js
- 함수형 컴포넌트만 사용
- "use client" 지시어 필요한 경우에만 사용
- App Router 구조 준수 (app/ 디렉토리)
- 서버 컴포넌트를 기본으로, 클라이언트 컴포넌트는 최소화

### 컴포넌트 구조
- 단일 책임 원칙 준수
- props interface는 컴포넌트 위에 정의
- 이벤트 핸들러는 handle~ 형태로 명명
- 스타일링은 Tailwind CSS 클래스만 사용

### 데이터베이스 (Supabase)
- `lib/supabase.ts`의 기존 함수들 활용
- 새로운 DB 함수 추가 시 적절한 에러 처리 포함
- 타입 안전성을 위해 Database 타입 정의 활용

### 파일 및 디렉토리 구조
- 컴포넌트: `components/` (kebab-case)
- 페이지: `app/` (Next.js App Router)
- 유틸리티: `lib/`
- 스크립트: `scripts/`
- UI 컴포넌트: `components/ui/` (shadcn/ui)

### 명명 규칙
- 파일: kebab-case (blog-card.tsx)
- 컴포넌트: PascalCase (BlogCard)
- 함수: camelCase (fetchBlogs)
- 상수: UPPER_SNAKE_CASE (RSS_FEEDS)

### 에러 처리
- try-catch 블록 적극 활용
- 사용자 친화적 에러 메시지 (한국어)
- useToast 훅을 통한 에러 알림
- 로딩 상태 관리

### 접근성 및 UX
- 적절한 aria-label 및 semantic HTML 사용
- 키보드 접근성 고려
- 로딩 상태 및 스켈레톤 UI 제공
- 반응형 디자인 (모바일 우선)

### 성능 최적화
- Next.js Image 컴포넌트 사용
- 적절한 메모이제이션 (useMemo, useCallback)
- 페이지네이션으로 대용량 데이터 처리
- 이미지 최적화 및 lazy loading

### RSS 크롤링 관련
- `scripts/rss-crawler.js` 구조 유지
- 새로운 RSS 피드 추가 시 RSS_FEEDS 배열에 추가
- 중복 검사 로직 필수
- 에러 복원력 고려 (개별 피드 실패 시에도 계속 진행)

### 코드 품질
- ESLint 및 Prettier 규칙 준수
- 주석은 한국어로 작성
- 복잡한 로직에는 상세한 주석 추가
- 함수는 단일 책임을 가지도록 작은 단위로 분리

### 보안
- 환경 변수를 통한 민감 정보 관리
- Supabase RLS 정책 준수
- 외부 링크는 새 탭에서 열기 (rel="noopener noreferrer")

### 개발 워크플로우
- 기능별 브랜치 생성
- 커밋 메시지는 한국어로 명확하게
- 새로운 의존성 추가 시 pnpm 사용
- 타입 체크 통과 후 커밋

## 주요 패턴 및 예시

### 컴포넌트 패턴
```tsx
interface ComponentProps {
  // props 정의
}

export function Component({ prop1, prop2 }: ComponentProps) {
  // 상태 관리
  // 이벤트 핸들러
  // 렌더링
}
```

### API 함수 패턴
```typescript
export async function apiFunction(params: ParamsType): Promise<ReturnType> {
  try {
    // Supabase 쿼리
    if (error) throw new Error(`설명적인 에러 메시지: ${error.message}`)
    return data
  } catch (error) {
    throw new Error(`함수명 실패: ${error.message}`)
  }
}
```

### 에러 처리 패턴
```tsx
const { toast } = useToast()

const handleAction = async () => {
  try {
    setLoading(true)
    await apiCall()
    toast({ title: "성공", description: "작업이 완료되었습니다." })
  } catch (error) {
    toast({
      title: "오류",
      description: "작업에 실패했습니다.",
      variant: "destructive",
    })
  } finally {
    setLoading(false)
  }
}
```

이 규칙들을 따라 일관성 있고 품질 높은 코드를 작성해주세요.